/**
 * Redirects the incoming request to Google’s OAuth 2.0 authorization endpoint using PKCE.
 *
 * @param {Request} request
 *   The Fetch API Request object for the incoming HTTP request.
 *   Must include the following query parameters:
 *     - `code_challenge`: the PKCE code challenge generated by the client.
 *     - `state`: a unique opaque value to prevent CSRF.
 *
 * @param {Object} env
 *   Cloudflare Workers environment bindings:
 *     @param {string} env.GOOGLE_CLIENT_ID
 *       The OAuth 2.0 Client ID obtained from Google Cloud Console.
 *     @param {string} env.AUTH_REDIRECT_URI
 *       The redirect URI registered in the Google OAuth client settings,
 *       e.g. `https://your-app.com/auth/callback/`.
 *
 * @returns {Response}
 *   - A 302 Redirect response to Google’s `/o/oauth2/v2/auth` endpoint with:
 *     `client_id`, `redirect_uri`, `response_type=code`,
 *     `scope=openid email profile`, `code_challenge`,
 *     `code_challenge_method=S256`, and `state`.
 *   - A 400 Bad Request response if `code_challenge` or `state` is missing.
 */
export function requestAuthnViaGoogle(url, env) {
  const challenge = url.searchParams.get("code_challenge");
  const state     = url.searchParams.get("state");

  if (!challenge || !state) {
    return new Response("Missing code_challenge or state", { status: 400 });
  }

  const authUrl = new URL("https://accounts.google.com/o/oauth2/v2/auth");
  authUrl.searchParams.set("client_id",             env.GOOGLE_CLIENT_ID);
  authUrl.searchParams.set("redirect_uri",          env.AUTH_REDIRECT_URI);
  authUrl.searchParams.set("response_type",         "code");
  authUrl.searchParams.set("scope",                 "openid email profile");
  authUrl.searchParams.set("code_challenge",        challenge);
  authUrl.searchParams.set("code_challenge_method", "S256");
  authUrl.searchParams.set("state",                 state);

  return Response.redirect(authUrl, 302);
}

/**
 * Exchanges the authorization code returned by Google for access and ID tokens.
 *
 * @param {string} code
 *   The authorization code from Google (extracted from the callback URL query parameters).
 * @param {Object} env
 *   Cloudflare Workers environment bindings:
 *   @param {Secret} env.GOOGLE_OAUTH_CLIENT_SECRET
 *     The client secret stored securely in the Secret Store.
 *   @param {string} env.GOOGLE_CLIENT_ID
 *     The OAuth 2.0 Client ID obtained from Google Cloud Console.
 *   @param {string} env.AUTH_REDIRECT_URI
 *     The redirect URI registered in your Google OAuth client settings
 *     (e.g. `https://your-app.com/auth/callback/`).
 * @param {Object} cookies
 *   Parsed cookies object from the incoming request. Must include:
 *     - `cookies.pkce_verifier`: the original PKCE code verifier generated by the client.
 *
 * @returns {Promise<Response>}
 *   - On success: the Response object containing Google’s JSON token payload
 *     (`access_token`, `id_token`, `expires_in`, etc.).
 *   - On failure: a 502 Bad Gateway Response with the error message.
 */
export async function exchangeTokenWithGoogle(env, cookies, code) {

  const clientSecret = await env.GOOGLE_OAUTH_CLIENT_SECRET.get();

  const params = new URLSearchParams({
    code,
    client_id:     env.GOOGLE_CLIENT_ID,
    client_secret: clientSecret,
    redirect_uri:  env.AUTH_REDIRECT_URI,
    grant_type:    "authorization_code",
    code_verifier: cookies.pkce_verifier
  });
  const tokenRes = await fetch("https://oauth2.googleapis.com/token", {
    method:  "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body:    params
  });
  if (!tokenRes.ok) {
    const msg = await tokenRes.text();
    return new Response(`Token exchange failed: ${msg}`, { status: 502 });
  }
  return tokenRes;
}

