

/**
 * Redirects the incoming request URL to Microsoft’s OAuth 2.0 authorization endpoint using PKCE.
 *
 * @param {URL} url
 *   The parsed URL of the incoming request. Must include:
 *     - `code_challenge` query parameter: the PKCE code challenge generated by the client.
 *     - `state` query parameter: a unique opaque value to prevent CSRF.
 * @param {Object} env
 *   Cloudflare Workers environment bindings:
 *   @param {string} env.MS_CLIENT_ID
 *     The OAuth 2.0 Client ID from your Azure AD app registration.
 *   @param {string} env.AUTH_REDIRECT_URI
 *     The redirect URI registered in Azure AD settings,
 *     e.g. `https://your-app.com/auth/callback/`.
 *   @param {string} [env.MS_TENANT_ID]
 *     (Optional) The Azure AD tenant identifier (`common`, `organizations`, `consumers` or GUID).
 *     Defaults to `"common"`.
 * @returns {Response}
 *   - A 302 Redirect to Microsoft’s `/authorize` endpoint with:
 *     `client_id`, `redirect_uri`, `response_type=code`, `response_mode=query`,
 *     `scope=openid profile email offline_access`, `code_challenge`,
 *     `code_challenge_method=S256`, and `state`.
 *   - A 400 Bad Request if `code_challenge` or `state` is missing.
 */

export function requestAuthnViaMs(url, env) {
  const tenant  = "common";
  const challenge = url.searchParams.get("code_challenge");
  const state     = url.searchParams.get("state");

  if (!challenge || !state) {
    return new Response("Missing code_challenge or state", { status: 400 });
  }

  const authUrl = new URL(
    `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize`
  );

  authUrl.searchParams.set("client_id",             env.MS_CLIENT_ID);
  authUrl.searchParams.set("redirect_uri",          env.AUTH_REDIRECT_URI);
  authUrl.searchParams.set("response_type",         "code");
  authUrl.searchParams.set("response_mode",         "query");
  authUrl.searchParams.set("scope",                 "openid profile email offline_access");
  authUrl.searchParams.set("code_challenge",        challenge);
  authUrl.searchParams.set("code_challenge_method", "S256");
  authUrl.searchParams.set("state",                 state);

  return Response.redirect(authUrl.toString(), 302);
}



/**
 * Exchanges the authorization code returned by Microsoft for access and ID tokens.
 *
 * @param {string} code
 *   The authorization code from Microsoft (extracted from the callback URL).
 * @param {Object} env
 *   Cloudflare Workers environment bindings:
 *     @param {Secret} env.MS_OAUTH_CLIENT_SECRET
 *       The client secret stored securely in the Secrets Store.
 *     @param {string} env.MS_CLIENT_ID
 *       The OAuth 2.0 Client ID from your Azure AD app registration.
 *     @param {string} env.AUTH_REDIRECT_URI
 *       The redirect URI registered in your Azure AD app settings
 *       (e.g. `https://your-app.com/auth/callback/`).
 *     @param {string} [env.MS_TENANT_ID]
 *       (Optional) The Azure AD tenant identifier (`common`, `organizations`, `consumers` or GUID).
 *       Defaults to `"common"` if not provided.
 * @param {Object} cookies
 *   Parsed cookies object from the incoming request. Must include:
 *     - `cookies.pkce_verifier`: the original PKCE code verifier.
 *
 * @returns {Promise<Response>}
 *   - The raw Response object from Microsoft’s token endpoint, containing JSON
 *     `{ access_token, refresh_token?, id_token, expires_in, ... }` on success.
 *   - A 502 Bad Gateway Response with the error message if the token exchange fails.
 */

export async function exchangeTokenWithMs(env, cookies, code) {
  const tenant  = env.MS_TENANT_ID || "common";
  const tokenUrl = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/token`;
  const clientSecret = await env.MS_OAUTH_CLIENT_SECRET.get();

  const params = new URLSearchParams({
    code,
    client_id:     env.MS_CLIENT_ID,
    client_secret: clientSecret,
    redirect_uri:  env.AUTH_REDIRECT_URI,
    grant_type:    "authorization_code",
    code_verifier: cookies.pkce_verifier
  });

  const tokenRes = await fetch(tokenUrl, {
    method:  "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body:    params
  });

  if (!tokenRes.ok) {
    const msg = await tokenRes.text();
    return new Response(`Token exchange failed: ${msg}`, { status: 502 });
  }
  return tokenRes;
}
